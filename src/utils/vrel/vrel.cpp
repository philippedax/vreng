/****************************************************************************
 *                             VREL	                                    *
 *                                                                          *
 *                           Copyright (C) 2000                             *
 *     Yanneck Chevalier, Pascal Belin, Alexis Jeannerod, Julien Dauphin    *
 *                                                                          *
 *   This program is free software; you can redistribute it and/or modify   *
 *   it under the terms of the GNU General Public License as published by   *
 *   the Free Software Foundation; either version 2 of the License, or      *
 *   (at your option) any later version.                                    *
 *                                                                          *
 *   This program is distributed in the hope that it will be useful,        *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU General Public License for more details.                           *
 ****************************************************************************/

#include "vrel.hpp"
#include "program.hpp"
#include "envobject.hpp"
#include "envclass.hpp"
#include "envvar.hpp"
#include "tabvar.hpp"
#include "tabobj.hpp"

extern FILE *yyin;     // fichier source (.vrel)
extern FILE *yyout;    // fichier de configuration vreng (.vre)
extern int yyparse();  // parseur cree par bison


char vrelfile[100];	// fichier lu courant
int comptfichier;	// numero de fichier ouvert
FILE * tabyyin[20];	// tableau memorisant le pointeur sur le fichier ouvert 
int tablinenumber[20];	// tableau memorisant le numero de ligne dans ce fichier
char tabvrelfile[20][100]; // tableau contenant les noms de fichiers

Programme *prog;	// Pointeur sur le programme

Env_var * varlocal = new Env_var();   // Pointeur sur les variables locales.
Env_var * varglobal = new Env_var();  // Pointeur sur les variables globales.
Env_var * attribut = new Env_var();   // Pointeur sur les attributs de la classe courante.
Env_classe * mere = new Env_classe(); // Tableau des classes.
Env_objets * pere = new Env_objets(); // Tableau des objets crees.
Tabvar * tableauvar = new Tabvar();   // Tableau des environnements de variables.
Tabobj * tableauobj = new Tabobj();   // Tableau des environnements d'objets.


int main(int argc, char *argv[]) 
{
  if (argc == 1) {
    printf("Usage: %s inputfile [outputfile]\n", argv[0]);
    exit(1);
  }
  if ((yyin = fopen(argv[1], "r")) == NULL) {
    perror(argv[1]); 
    exit(1); 
  }
  if (argc == 3) {	// outputfile
    if ((yyout = fopen(argv[2], "w")) == NULL) {
      perror(argv[2]); 
      yyout = stdout;
    }
  }
  else			// stdout
    yyout = stdout;
  
  strcpy(vrelfile, argv[1]);
  comptfichier = 0;

  // Parsing and translation
  fprintf(yyout,
          "<!-- File generated by %s -->\n<vre version=\"8.0\">\n<meta>\n<meta name=\"filename\" content=\"%s\"/>\n</meta>\n<scene>\n\n",
          argv[0], (argc == 3) ? argv[2] : "vrel stdout");

  yyparse();	// parsing
  prog->exec();	// translation

  fprintf(yyout, "</scene>\n</vre>\n");
  
  fclose(yyin);
  fclose(yyout);
  printf("vrel done\n");
}
